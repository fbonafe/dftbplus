!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ARTOL	linrespgrad.F90	/^  real(dp), parameter :: ARTOL /;"	v	module:dftbp_timedep_linrespgrad
CONV_THRESH_STRAT	linrespgrad.F90	/^  real(dp), parameter :: CONV_THRESH_STRAT /;"	v	module:dftbp_timedep_linrespgrad
Dsqr	timeprop.F90	/^    complex(dp), allocatable :: Dsqr(/;"	k	type:TElecDynamics
Eiginv	timeprop.F90	/^    complex(dp), allocatable :: Eiginv(/;"	k	type:TElecDynamics
EiginvAdj	timeprop.F90	/^    complex(dp), allocatable :: Eiginv(:,:,:), EiginvAdj(/;"	k	type:TElecDynamics
ErhoPrim	timeprop.F90	/^    real(dp), allocatable :: rhoPrim(:,:), ham0(:), ErhoPrim(/;"	k	type:TElecDynamics
FirstIonStep	timeprop.F90	/^    logical :: FirstIonStep /;"	k	type:TElecDynamics
H1	timeprop.F90	/^    complex(dp), allocatable :: H1(/;"	k	type:TElecDynamics
H1LC	timeprop.F90	/^    complex(dp), allocatable :: H1LC(/;"	k	type:TElecDynamics
HubbardU	linresp.F90	/^    real(dp), allocatable :: HubbardU(/;"	k	type:TLinrespini
HubbardU	linresptypes.F90	/^    real(dp), allocatable :: HubbardU(/;"	k	type:TLinResp
KWeight	timeprop.F90	/^    real(dp), allocatable :: rCellVec(:,:), cellVec(:,:), kPoint(:,:), KWeight(/;"	k	type:TElecDynamics
LinRespGrad_old	linrespgrad.F90	/^  subroutine LinRespGrad_old(/;"	s	module:dftbp_timedep_linrespgrad
LinResp_addGradients	linresp.F90	/^  subroutine LinResp_addGradients(/;"	s	module:dftbp_timedep_linresp
LinResp_init	linresp.F90	/^  subroutine LinResp_init(/;"	s	module:dftbp_timedep_linresp
MAX_AR_ITER	linrespgrad.F90	/^  integer, parameter :: MAX_AR_ITER /;"	v	module:dftbp_timedep_linrespgrad
MOoverlap	linrespcommon.F90	/^  function MOoverlap(/;"	f	module:dftbp_timedep_linrespcommon
None	linresptypes.F90	/^    integer :: None /;"	k	type:TSolverTypesEnum
PpEnd	timeprop.F90	/^    integer :: nExcitedAtom, nMovedAtom, nSparse, eulerFreq, PpFreq, PpIni, PpEnd$/;"	k	type:TElecDynamics
PpFreq	timeprop.F90	/^    integer :: nExcitedAtom, nMovedAtom, nSparse, eulerFreq, PpFreq,/;"	k	type:TElecDynamics
PpIni	timeprop.F90	/^    integer :: nExcitedAtom, nMovedAtom, nSparse, eulerFreq, PpFreq, PpIni,/;"	k	type:TElecDynamics
Qsqr	timeprop.F90	/^    complex(dp), allocatable :: Qsqr(/;"	k	type:TElecDynamics
RdotSprime	timeprop.F90	/^    complex(dp), allocatable :: RdotSprime(/;"	k	type:TElecDynamics
ReadMDVelocities	timeprop.F90	/^    logical :: tForces, ReadMDVelocities,/;"	k	type:TElecDynamics
Sinv	timeprop.F90	/^    complex(dp), allocatable :: Sinv(/;"	k	type:TElecDynamics
Ssqr	timeprop.F90	/^    complex(dp), allocatable :: Ssqr(/;"	k	type:TElecDynamics
TDEnvelopeFunctionEnum	timeprop.F90	/^  type :: TDEnvelopeFunctionEnum$/;"	t	module:dftbp_timedep_timeprop
TDPertTypeEnum	timeprop.F90	/^  type :: TDPertTypeEnum$/;"	t	module:dftbp_timedep_timeprop
TDSpinTypesEnum	timeprop.F90	/^  type :: TDSpinTypesEnum$/;"	t	module:dftbp_timedep_timeprop
TElecDynamics	timeprop.F90	/^  type TElecDynamics$/;"	t	module:dftbp_timedep_timeprop
TElecDynamicsInp	timeprop.F90	/^  type TElecDynamicsInp$/;"	t	module:dftbp_timedep_timeprop
TElecDynamics_init	timeprop.F90	/^  subroutine TElecDynamics_init(/;"	s	module:dftbp_timedep_timeprop
TLinResp	linresptypes.F90	/^  type :: TLinResp$/;"	t	module:dftbp_timedep_linresptypes
TLinrespini	linresp.F90	/^  type :: TLinrespini$/;"	t	module:dftbp_timedep_linresp
TSolverTypesEnum	linresptypes.F90	/^  type TSolverTypesEnum$/;"	t	module:dftbp_timedep_linresptypes
TTransCharges	transcharges.F90	/^  type :: TTransCharges$/;"	t	module:dftbp_timedep_transcharges
TTransCharges_init	transcharges.F90	/^  subroutine TTransCharges_init(/;"	s	module:dftbp_timedep_transcharges
TTransCharges_qMatVec	transcharges.F90	/^  pure subroutine TTransCharges_qMatVec(/;"	s	module:dftbp_timedep_transcharges
TTransCharges_qMatVecDs	transcharges.F90	/^  pure subroutine TTransCharges_qMatVecDs(/;"	s	module:dftbp_timedep_transcharges
TTransCharges_qTransAB	transcharges.F90	/^  pure function TTransCharges_qTransAB(/;"	f	module:dftbp_timedep_transcharges
TTransCharges_qTransIA	transcharges.F90	/^  pure function TTransCharges_qTransIA(/;"	f	module:dftbp_timedep_transcharges
TTransCharges_qTransIJ	transcharges.F90	/^  pure function TTransCharges_qTransIJ(/;"	f	module:dftbp_timedep_transcharges
TTransCharges_qVecMat	transcharges.F90	/^  pure subroutine TTransCharges_qVecMat(/;"	s	module:dftbp_timedep_transcharges
TTransCharges_qVecMatDs	transcharges.F90	/^  pure subroutine TTransCharges_qVecMatDs(/;"	s	module:dftbp_timedep_transcharges
TppRPAcal	pprpa.F90	/^  type :: TppRPAcal$/;"	t	module:dftbp_timedep_pprpa
XplusYOut	linrespgrad.F90	/^  character(*), parameter :: XplusYOut /;"	v	module:dftbp_timedep_linrespgrad
actionAminusB	linrespcommon.F90	/^  subroutine actionAminusB(/;"	s	module:dftbp_timedep_linrespcommon
actionAplusB	linrespcommon.F90	/^  subroutine actionAplusB(/;"	s	module:dftbp_timedep_linrespcommon
addGradients	linrespgrad.F90	/^  subroutine addGradients(/;"	s	module:dftbp_timedep_linrespgrad
addNadiaGradients	linrespgrad.F90	/^  subroutine addNadiaGradients(/;"	s	module:dftbp_timedep_linrespgrad
arpack	linresptypes.F90	/^    integer :: arpack /;"	k	type:TSolverTypesEnum
arpackOut	linrespgrad.F90	/^  character(*), parameter :: arpackOut /;"	v	module:dftbp_timedep_linrespgrad
atomEigVal	timeprop.F90	/^    real(dp), allocatable :: atomEigVal(/;"	k	type:TElecDynamics
atomEnergyDat	timeprop.F90	/^    type(TFileDescr) :: dipoleDat, qDat, energyDat, atomEnergyDat$/;"	k	type:TElecDynamics
autotestTag	timeprop.F90	/^    character(mc) :: autotestTag$/;"	k	type:TElecDynamics
bondWork	timeprop.F90	/^    real(dp), allocatable :: bondWork(/;"	k	type:TElecDynamics
buildAndDiagExcMatrixArpack	linrespgrad.F90	/^  subroutine buildAndDiagExcMatrixArpack(/;"	s	module:dftbp_timedep_linrespgrad
buildAndDiagExcMatrixStratmann	linrespgrad.F90	/^  subroutine buildAndDiagExcMatrixStratmann(/;"	s	module:dftbp_timedep_linrespgrad
buildAndDiagppRPAmatrix	pprpa.F90	/^  subroutine buildAndDiagppRPAmatrix(/;"	s	module:dftbp_timedep_pprpa
calcMatrixSqrt	linrespcommon.F90	/^  subroutine calcMatrixSqrt(/;"	s	module:dftbp_timedep_linrespcommon
calcPMatrix	linrespgrad.F90	/^  subroutine calcPMatrix(/;"	s	module:dftbp_timedep_linrespgrad
calcTransitionDipoles	linrespcommon.F90	/^  subroutine calcTransitionDipoles(/;"	s	module:dftbp_timedep_linrespcommon
calcWvectorZ	linrespgrad.F90	/^  subroutine calcWvectorZ(/;"	s	module:dftbp_timedep_linrespgrad
cellVec	timeprop.F90	/^    real(dp), allocatable :: rCellVec(:,:), cellVec(/;"	k	type:TElecDynamics
chargePerShell	timeprop.F90	/^    real(dp), allocatable :: rhoPrim(:,:), ham0(:), ErhoPrim(:), chargePerShell(/;"	k	type:TElecDynamics
closeTDOutputs	timeprop.F90	/^  subroutine closeTDOutputs(/;"	s	module:dftbp_timedep_timeprop
conicalIntersectionOptimizer	linrespgrad.F90	/^  subroutine conicalIntersectionOptimizer(/;"	s	module:dftbp_timedep_linrespgrad
constant	timeprop.F90	/^    integer :: constant /;"	k	type:TDEnvelopeFunctionEnum
coorDat	timeprop.F90	/^    type(TFileDescr) :: forceDat, coorDat,/;"	k	type:TElecDynamics
coordNew	timeprop.F90	/^    real(dp), allocatable, public :: coordNew(/;"	k	type:TElecDynamics
currPolDir	timeprop.F90	/^    integer :: nAtom, nOrbs, nSpin=1, currPolDir=/;"	k	type:TElecDynamics
deltaQ	timeprop.F90	/^    real(dp), allocatable, public :: dipole(:,:), totalForce(:,:), occ(:), deltaQ(/;"	k	type:TElecDynamics
deltaRho	timeprop.F90	/^    complex(dp), allocatable :: H1LC(:,:), deltaRho(/;"	k	type:TElecDynamics
derivator	timeprop.F90	/^    type(TNonSccDiff), allocatable :: derivator$/;"	k	type:TElecDynamics
dftbp_timedep_dynamicsrestart	dynamicsrestart.F90	/^module dftbp_timedep_dynamicsrestart$/;"	m
dftbp_timedep_linresp	linresp.F90	/^module dftbp_timedep_linresp$/;"	m
dftbp_timedep_linrespcommon	linrespcommon.F90	/^module dftbp_timedep_linrespcommon$/;"	m
dftbp_timedep_linrespgrad	linrespgrad.F90	/^module dftbp_timedep_linrespgrad$/;"	m
dftbp_timedep_linresptypes	linresptypes.F90	/^module dftbp_timedep_linresptypes$/;"	m
dftbp_timedep_pprpa	pprpa.F90	/^module dftbp_timedep_pprpa$/;"	m
dftbp_timedep_timeprop	timeprop.F90	/^module dftbp_timedep_timeprop$/;"	m
dftbp_timedep_transcharges	transcharges.F90	/^module dftbp_timedep_transcharges$/;"	m
dipSelect	linrespcommon.F90	/^  subroutine dipSelect(/;"	s	module:dftbp_timedep_linrespcommon
dipole	timeprop.F90	/^    real(dp), allocatable, public :: dipole(/;"	k	type:TElecDynamics
dipoleDat	timeprop.F90	/^    type(TFileDescr) :: dipoleDat,/;"	k	type:TElecDynamics
doDynamics	timeprop.F90	/^  subroutine doDynamics(/;"	s	module:dftbp_timedep_timeprop
doTdStep	timeprop.F90	/^  subroutine doTdStep(/;"	s	module:dftbp_timedep_timeprop
dt	timeprop.F90	/^    real(dp) :: dt$/;"	k	type:TElecDynamicsInp
dt	timeprop.F90	/^    real(dp), public :: dt$/;"	k	type:TElecDynamics
energy	timeprop.F90	/^    type(TEnergies), public :: energy$/;"	k	type:TElecDynamics
energyDat	timeprop.F90	/^    type(TFileDescr) :: dipoleDat, qDat, energyDat,/;"	k	type:TElecDynamics
energyKin	timeprop.F90	/^    real(dp) :: time, startTime, timeElec, energyKin,/;"	k	type:TElecDynamics
energyShiftCI	linresp.F90	/^    real(dp) :: energyShiftCI$/;"	k	type:TLinrespini
energyShiftCI	linresptypes.F90	/^    real(dp) :: energyShiftCI$/;"	k	type:TLinResp
energyWindow	linresp.F90	/^    real(dp) :: energyWindow$/;"	k	type:TLinrespini
energyWindow	linresptypes.F90	/^    real(dp) :: energyWindow$/;"	k	type:TLinResp
envType	timeprop.F90	/^    integer :: envType$/;"	k	type:TElecDynamicsInp
envType	timeprop.F90	/^    integer :: writeFreq, pertType, envType,/;"	k	type:TElecDynamics
envTypes	timeprop.F90	/^  type(TDEnvelopeFunctionEnum), parameter :: envTypes /;"	v	module:dftbp_timedep_timeprop
eulerFreq	timeprop.F90	/^    integer :: eulerFreq$/;"	k	type:TElecDynamicsInp
eulerFreq	timeprop.F90	/^    integer :: nExcitedAtom, nMovedAtom, nSparse, eulerFreq,/;"	k	type:TElecDynamics
evalCoeffs	linrespgrad.F90	/^  subroutine evalCoeffs(/;"	s	module:dftbp_timedep_linrespgrad
excitationsOut	linrespgrad.F90	/^  character(*), parameter :: excitationsOut /;"	v	module:dftbp_timedep_linrespgrad
excitationsOut	pprpa.F90	/^  character(*), parameter :: excitationsOut /;"	v	module:dftbp_timedep_pprpa
excitedCoefsOut	linrespgrad.F90	/^  character(*), parameter :: excitedCoefsOut /;"	v	module:dftbp_timedep_linrespgrad
excitedDipoleOut	linrespcommon.F90	/^  character(*), parameter :: excitedDipoleOut /;"	v	module:dftbp_timedep_linrespcommon
excitedQOut	linrespcommon.F90	/^  character(*), parameter :: excitedQOut /;"	v	module:dftbp_timedep_linrespcommon
fdBondEnergy	timeprop.F90	/^    type(TFileDescr) :: forceDat, coorDat, fdBondPopul, fdBondEnergy$/;"	k	type:TElecDynamics
fdBondPopul	timeprop.F90	/^    type(TFileDescr) :: forceDat, coorDat, fdBondPopul,/;"	k	type:TElecDynamics
field	timeprop.F90	/^    real(dp) :: field$/;"	k	type:TElecDynamics
fieldDir	timeprop.F90	/^    complex(dp) :: fieldDir(/;"	k	type:TElecDynamics
finalizeDynamics	timeprop.F90	/^  subroutine finalizeDynamics(/;"	s	module:dftbp_timedep_timeprop
fixNACVPhase	linrespgrad.F90	/^  subroutine fixNACVPhase(/;"	s	module:dftbp_timedep_linrespgrad
forceDat	timeprop.F90	/^    type(TFileDescr) :: forceDat,/;"	k	type:TElecDynamics
fromFile	timeprop.F90	/^    integer :: fromFile /;"	k	type:TDEnvelopeFunctionEnum
gaussian	timeprop.F90	/^    integer :: gaussian /;"	k	type:TDEnvelopeFunctionEnum
getBondPopulAndEnergy	timeprop.F90	/^  subroutine getBondPopulAndEnergy(/;"	s	module:dftbp_timedep_timeprop
getChargeDipole	timeprop.F90	/^  subroutine getChargeDipole(/;"	s	module:dftbp_timedep_timeprop
getExcMulliken	linrespgrad.F90	/^  subroutine getExcMulliken(/;"	s	module:dftbp_timedep_linrespgrad
getExcSpin	linrespcommon.F90	/^  subroutine getExcSpin(/;"	s	module:dftbp_timedep_linrespcommon
getForces	timeprop.F90	/^  subroutine getForces(/;"	s	module:dftbp_timedep_timeprop
getHooT	linrespgrad.F90	/^  subroutine getHooT(/;"	s	module:dftbp_timedep_linrespgrad
getHooXY	linrespgrad.F90	/^  subroutine getHooXY(/;"	s	module:dftbp_timedep_linrespgrad
getHovT	linrespgrad.F90	/^  subroutine getHovT(/;"	s	module:dftbp_timedep_linrespgrad
getHplusMfr	linrespgrad.F90	/^  subroutine getHplusMfr(/;"	s	module:dftbp_timedep_linrespgrad
getHplusXYfr	linrespgrad.F90	/^  subroutine getHplusXYfr(/;"	s	module:dftbp_timedep_linrespgrad
getHvvXY	linrespgrad.F90	/^  subroutine getHvvXY(/;"	s	module:dftbp_timedep_linrespgrad
getNadiaZvectorEqRHS	linrespgrad.F90	/^  subroutine getNadiaZvectorEqRHS(/;"	s	module:dftbp_timedep_linrespgrad
getOscillatorStrengths	linrespgrad.F90	/^  subroutine getOscillatorStrengths(/;"	s	module:dftbp_timedep_linrespgrad
getPositionDependentEnergy	timeprop.F90	/^  subroutine  getPositionDependentEnergy(/;"	s	module:dftbp_timedep_timeprop
getRdotSprime	timeprop.F90	/^  subroutine getRdotSprime(/;"	s	module:dftbp_timedep_timeprop
getSOffsite	linrespgrad.F90	/^  subroutine getSOffsite(/;"	s	module:dftbp_timedep_linrespgrad
getSPExcitations	linrespcommon.F90	/^  subroutine getSPExcitations(/;"	s	module:dftbp_timedep_linrespcommon
getSqrGamma	linrespgrad.F90	/^  subroutine getSqrGamma(/;"	s	module:dftbp_timedep_linrespgrad
getSqrOcc	linrespcommon.F90	/^  subroutine getSqrOcc(/;"	s	module:dftbp_timedep_linrespcommon
getSqrS	linrespgrad.F90	/^  subroutine getSqrS(/;"	s	module:dftbp_timedep_linrespgrad
getTDEnergy	timeprop.F90	/^  subroutine getTDEnergy(/;"	s	module:dftbp_timedep_timeprop
getTDFunction	timeprop.F90	/^  subroutine getTDFunction(/;"	s	module:dftbp_timedep_timeprop
getTDPopulations	timeprop.F90	/^  subroutine getTDPopulations(/;"	s	module:dftbp_timedep_timeprop
getZVectorEqRHS	linrespgrad.F90	/^   subroutine getZVectorEqRHS(/;"	s	module:dftbp_timedep_linrespgrad
grndToExcDensityMatrices	linrespgrad.F90	/^  subroutine grndToExcDensityMatrices(/;"	s	module:dftbp_timedep_linrespgrad
ham0	timeprop.F90	/^    real(dp), allocatable :: rhoPrim(:,:), ham0(/;"	k	type:TElecDynamics
hamiltonianType	timeprop.F90	/^    integer :: hamiltonianType$/;"	k	type:TElecDynamics
hhubbard	pprpa.F90	/^    real(dp), allocatable :: hhubbard(/;"	k	type:TppRPAcal
iCall	timeprop.F90	/^    integer, public :: iCall$/;"	k	type:TElecDynamics
iCellVec	timeprop.F90	/^    integer, allocatable :: iCellVec(/;"	k	type:TElecDynamics
iDumpFormat	dynamicsrestart.F90	/^  integer, parameter :: iDumpFormat /;"	v	module:dftbp_timedep_dynamicsrestart
iLinRespSolver	linresp.F90	/^    integer :: iLinRespSolver$/;"	k	type:TLinrespini
iLinRespSolver	linresptypes.F90	/^    integer :: iLinRespSolver /;"	k	type:TLinResp
imFieldPolVec	timeprop.F90	/^    real(dp) :: imFieldPolVec(/;"	k	type:TElecDynamicsInp
incMemStratmann	linrespcommon.F90	/^  subroutine incMemStratmann(/;"	s	module:dftbp_timedep_linrespcommon
incSizeMatBothDim	linrespcommon.F90	/^  pure subroutine incSizeMatBothDim(/;"	s	module:dftbp_timedep_linrespcommon
incSizeMatDimOne	linrespcommon.F90	/^  pure subroutine incSizeMatDimOne(/;"	s	module:dftbp_timedep_linrespcommon
incSizeMatDimTwo	linrespcommon.F90	/^  pure subroutine incSizeMatDimTwo(/;"	s	module:dftbp_timedep_linrespcommon
incSizeVec	linrespcommon.F90	/^  pure subroutine incSizeVec(/;"	s	module:dftbp_timedep_linrespcommon
indExcitedAtom	timeprop.F90	/^    integer, allocatable :: iCellVec(:), indExcitedAtom(/;"	k	type:TElecDynamics
indExcitedAtom	timeprop.F90	/^    integer, allocatable :: indExcitedAtom(/;"	k	type:TElecDynamicsInp
indMovedAtom	timeprop.F90	/^    integer, allocatable :: indMovedAtom(/;"	k	type:TElecDynamicsInp
indMovedAtom	timeprop.F90	/^    integer, allocatable, public :: indMovedAtom(/;"	k	type:TElecDynamics
indNACouplings	linresp.F90	/^    integer :: indNACouplings(/;"	k	type:TLinrespini
indNACouplings	linresptypes.F90	/^    integer :: indNACouplings(/;"	k	type:TLinResp
indxoo	linrespcommon.F90	/^  subroutine indxoo(/;"	s	module:dftbp_timedep_linrespcommon
indxov	linrespcommon.F90	/^  pure subroutine indxov(/;"	s	module:dftbp_timedep_linrespcommon
indxvv	linrespcommon.F90	/^  subroutine indxvv(/;"	s	module:dftbp_timedep_linrespcommon
initCoord	timeprop.F90	/^    real(dp), allocatable :: initCoord(/;"	k	type:TElecDynamics
initIonDynamics	timeprop.F90	/^  subroutine initIonDynamics(/;"	s	module:dftbp_timedep_timeprop
initLatticeVectors	timeprop.F90	/^  subroutine initLatticeVectors(/;"	s	module:dftbp_timedep_timeprop
initTDOutput	timeprop.F90	/^  subroutine initTDOutput(/;"	s	module:dftbp_timedep_timeprop
initialSubSpaceMatrixApmB	linrespcommon.F90	/^  subroutine initialSubSpaceMatrixApmB(/;"	s	module:dftbp_timedep_linrespcommon
initialVelocities	timeprop.F90	/^    real(dp), allocatable :: initialVelocities(/;"	k	type:TElecDynamics
initialVelocities	timeprop.F90	/^    real(dp), allocatable :: initialVelocities(/;"	k	type:TElecDynamicsInp
initializeDynamics	timeprop.F90	/^  subroutine initializeDynamics(/;"	s	module:dftbp_timedep_timeprop
initializePropagator	timeprop.F90	/^  subroutine initializePropagator(/;"	s	module:dftbp_timedep_timeprop
initializeTDVariables	timeprop.F90	/^  subroutine initializeTDVariables(/;"	s	module:dftbp_timedep_timeprop
invLatVec	timeprop.F90	/^    real(dp), allocatable :: latVec(:,:), invLatVec(/;"	k	type:TElecDynamics
isCIopt	linresp.F90	/^    logical :: isCIopt$/;"	k	type:TLinrespini
isCIopt	linresptypes.F90	/^    logical :: isCIopt$/;"	k	type:TLinResp
isRangeSep	timeprop.F90	/^    logical :: isRangeSep$/;"	k	type:TElecDynamics
kPoint	timeprop.F90	/^    real(dp), allocatable :: rCellVec(:,:), cellVec(:,:), kPoint(/;"	k	type:TElecDynamics
kick	timeprop.F90	/^    integer :: kick /;"	k	type:TDPertTypeEnum
kickAndLaser	timeprop.F90	/^    integer :: kickAndLaser /;"	k	type:TDPertTypeEnum
kickDM	timeprop.F90	/^  subroutine kickDM(/;"	s	module:dftbp_timedep_timeprop
laser	timeprop.F90	/^    integer :: laser /;"	k	type:TDPertTypeEnum
laserField	timeprop.F90	/^    real(dp) :: mCutoff, skCutoff, laserField$/;"	k	type:TElecDynamics
lastBondPopul	timeprop.F90	/^    real(dp) :: time, startTime, timeElec, energyKin, lastBondPopul$/;"	k	type:TElecDynamics
latVec	timeprop.F90	/^    real(dp), allocatable :: latVec(/;"	k	type:TElecDynamics
linResp_calcExcitations	linresp.F90	/^  subroutine linResp_calcExcitations(/;"	s	module:dftbp_timedep_linresp
linrespSolverTypes	linresptypes.F90	/^  type(TSolverTypesEnum), parameter :: linrespSolverTypes /;"	v	module:dftbp_timedep_linresptypes
mCutoff	timeprop.F90	/^    real(dp) :: mCutoff,/;"	k	type:TElecDynamics
movedAccel	timeprop.F90	/^    real(dp), allocatable :: movedAccel(/;"	k	type:TElecDynamics
movedMass	timeprop.F90	/^    real(dp), allocatable :: initialVelocities(:,:), movedMass(/;"	k	type:TElecDynamics
movedVelo	timeprop.F90	/^    real(dp), allocatable, public :: coordNew(:,:), movedVelo(/;"	k	type:TElecDynamics
multipole	timeprop.F90	/^    type(TMultipole) :: multipole$/;"	k	type:TElecDynamics
nAtom	linresptypes.F90	/^    integer :: nAtom$/;"	k	type:TLinResp
nAtom	timeprop.F90	/^    integer :: nAtom,/;"	k	type:TElecDynamics
nAtom	transcharges.F90	/^    integer :: nAtom$/;"	k	type:TTransCharges
nDipole	timeprop.F90	/^    integer :: nDipole /;"	k	type:TElecDynamics
nDynamicsInit	timeprop.F90	/^    integer :: nDynamicsInit /;"	k	type:TElecDynamics
nEl	linresptypes.F90	/^    real(dp) :: nEl$/;"	k	type:TLinResp
nExc	linresp.F90	/^    integer :: nExc$/;"	k	type:TLinrespini
nExc	linresptypes.F90	/^    integer :: nExc$/;"	k	type:TLinResp
nExc	pprpa.F90	/^    integer :: nExc$/;"	k	type:TppRPAcal
nExcitedAtom	timeprop.F90	/^    integer :: nExcitedAtom$/;"	k	type:TElecDynamicsInp
nExcitedAtom	timeprop.F90	/^    integer :: nExcitedAtom,/;"	k	type:TElecDynamics
nMatUp	transcharges.F90	/^    integer :: nMatUp$/;"	k	type:TTransCharges
nMatUpOccOcc	transcharges.F90	/^    integer :: nMatUpOccOcc$/;"	k	type:TTransCharges
nMatUpVirVir	transcharges.F90	/^    integer :: nMatUpVirVir$/;"	k	type:TTransCharges
nMovedAtom	timeprop.F90	/^    integer :: nExcitedAtom, nMovedAtom,/;"	k	type:TElecDynamics
nMovedAtom	timeprop.F90	/^    integer :: nMovedAtom$/;"	k	type:TElecDynamicsInp
nOrbs	timeprop.F90	/^    integer :: nAtom, nOrbs,/;"	k	type:TElecDynamics
nQuadrupole	timeprop.F90	/^    integer :: nDipole = 0, nQuadrupole /;"	k	type:TElecDynamics
nSparse	timeprop.F90	/^    integer :: nExcitedAtom, nMovedAtom, nSparse,/;"	k	type:TElecDynamics
nSpin	timeprop.F90	/^    integer :: nAtom, nOrbs, nSpin=/;"	k	type:TElecDynamics
nStat	linresp.F90	/^    integer :: nStat$/;"	k	type:TLinrespini
nStat	linresptypes.F90	/^    integer :: nStat$/;"	k	type:TLinResp
nSteps	timeprop.F90	/^    integer, public :: nSteps$/;"	k	type:TElecDynamics
nTransitions	transcharges.F90	/^    integer :: nTransitions$/;"	k	type:TTransCharges
naCouplingOut	linrespgrad.F90	/^  character(*), parameter :: naCouplingOut /;"	v	module:dftbp_timedep_linrespgrad
nacTol	linrespgrad.F90	/^  real(dp), parameter :: nacTol /;"	v	module:dftbp_timedep_linrespgrad
noTDPert	timeprop.F90	/^    integer :: noTDPert /;"	k	type:TDPertTypeEnum
nvirtual	pprpa.F90	/^    integer :: nvirtual$/;"	k	type:TppRPAcal
occ	timeprop.F90	/^    real(dp), allocatable, public :: dipole(:,:), totalForce(:,:), occ(/;"	k	type:TElecDynamics
oldEigenVectors	linresptypes.F90	/^    real(dp), allocatable :: oldEigenVectors(/;"	k	type:TLinResp
omega	timeprop.F90	/^    real(dp) :: omega$/;"	k	type:TElecDynamics
omega	timeprop.F90	/^    real(dp) :: omega$/;"	k	type:TElecDynamicsInp
onSiteMatrixElements	linresptypes.F90	/^    real(dp), allocatable :: onSiteMatrixElements(/;"	k	type:TLinResp
onsiteEner	linrespcommon.F90	/^  subroutine onsiteEner(/;"	s	module:dftbp_timedep_linrespcommon
openOutputFile	timeprop.F90	/^  subroutine openOutputFile(/;"	s	module:dftbp_timedep_timeprop
orthonormalizeVectors	linrespcommon.F90	/^  pure subroutine orthonormalizeVectors(/;"	s	module:dftbp_timedep_linrespcommon
oscillatorStrength	linrespcommon.F90	/^  function oscillatorStrength(/;"	f	module:dftbp_timedep_linrespcommon
oscillatorWindow	linresp.F90	/^    real(dp) :: oscillatorWindow$/;"	k	type:TLinrespini
oscillatorWindow	linresptypes.F90	/^    real(dp) :: oscillatorWindow$/;"	k	type:TLinResp
pMDIntegrator	timeprop.F90	/^    type(TMDIntegrator), allocatable :: pMDIntegrator$/;"	k	type:TElecDynamics
pThermostat	timeprop.F90	/^    type(TThermostat), allocatable :: pThermostat$/;"	k	type:TElecDynamics
parallelKS	timeprop.F90	/^    type(TParallelKS), allocatable :: parallelKS$/;"	k	type:TElecDynamics
pertType	timeprop.F90	/^    integer :: pertType$/;"	k	type:TElecDynamicsInp
pertType	timeprop.F90	/^    integer :: writeFreq, pertType,/;"	k	type:TElecDynamics
pertTypes	timeprop.F90	/^  type(TDPertTypeEnum), parameter :: pertTypes /;"	v	module:dftbp_timedep_timeprop
phase	timeprop.F90	/^    real(dp) :: phase$/;"	k	type:TElecDynamics
phase	timeprop.F90	/^    real(dp) :: phase$/;"	k	type:TElecDynamicsInp
polDir	timeprop.F90	/^    integer :: polDir$/;"	k	type:TElecDynamicsInp
polDirs	timeprop.F90	/^    integer, allocatable :: species(:), polDirs(/;"	k	type:TElecDynamics
populDat	timeprop.F90	/^    type(TFileDescr), allocatable :: populDat(/;"	k	type:TElecDynamics
potential	timeprop.F90	/^    type(TPotentials) :: potential$/;"	k	type:TElecDynamics
ppRPAenergies	pprpa.F90	/^  subroutine ppRPAenergies(/;"	s	module:dftbp_timedep_pprpa
presentField	timeprop.F90	/^    real(dp), public :: presentField(/;"	k	type:TElecDynamics
propagateRho	timeprop.F90	/^  subroutine propagateRho(/;"	s	module:dftbp_timedep_timeprop
propagateRhoRealH	timeprop.F90	/^  subroutine propagateRhoRealH(/;"	s	module:dftbp_timedep_timeprop
pumpFilesDir	timeprop.F90	/^  character(*), parameter :: pumpFilesDir /;"	v	module:dftbp_timedep_timeprop
qBlock	timeprop.F90	/^    real(dp), allocatable :: qBlock(/;"	k	type:TElecDynamics
qCacheOccOcc	transcharges.F90	/^    real(dp), allocatable :: qCacheOccOcc(/;"	k	type:TTransCharges
qCacheOccVir	transcharges.F90	/^    real(dp), allocatable :: qCacheOccVir(/;"	k	type:TTransCharges
qCacheVirVir	transcharges.F90	/^    real(dp), allocatable :: qCacheVirVir(/;"	k	type:TTransCharges
qDat	timeprop.F90	/^    type(TFileDescr) :: dipoleDat, qDat,/;"	k	type:TElecDynamics
qNetAtom	timeprop.F90	/^    real(dp), allocatable :: qBlock(:,:,:,:), qNetAtom(/;"	k	type:TElecDynamics
qq	timeprop.F90	/^    real(dp), allocatable :: qq(/;"	k	type:TElecDynamics
rCellVec	timeprop.F90	/^    real(dp), allocatable :: rCellVec(/;"	k	type:TElecDynamics
reFieldPolVec	timeprop.F90	/^    real(dp) :: reFieldPolVec(/;"	k	type:TElecDynamicsInp
readRestartFile	dynamicsrestart.F90	/^  subroutine readRestartFile(/;"	s	module:dftbp_timedep_dynamicsrestart
reallocateTDSparseArrays	timeprop.F90	/^  subroutine reallocateTDSparseArrays(/;"	s	module:dftbp_timedep_timeprop
restartFileName	timeprop.F90	/^  character(*), parameter :: restartFileName /;"	v	module:dftbp_timedep_timeprop
restartFreq	timeprop.F90	/^    integer :: nAtom, nOrbs, nSpin=1, currPolDir=1, restartFreq$/;"	k	type:TElecDynamics
restartFreq	timeprop.F90	/^    integer :: restartFreq$/;"	k	type:TElecDynamicsInp
rho	timeprop.F90	/^    complex(dp), pointer :: rho(/;"	k	type:TElecDynamics
rhoOld	timeprop.F90	/^    complex(dp), pointer :: rho(:,:,:), rhoOld(/;"	k	type:TElecDynamics
rhoPrim	timeprop.F90	/^    real(dp), allocatable :: rhoPrim(/;"	k	type:TElecDynamics
rindxov_array	linrespcommon.F90	/^  subroutine rindxov_array(/;"	s	module:dftbp_timedep_linrespcommon
runDynamics	timeprop.F90	/^  subroutine runDynamics(/;"	s	module:dftbp_timedep_timeprop
sccCalc	timeprop.F90	/^    type(TScc), allocatable :: sccCalc$/;"	k	type:TElecDynamics
setPresentField	timeprop.F90	/^  subroutine setPresentField(/;"	s	module:dftbp_timedep_timeprop
sin2	timeprop.F90	/^    integer :: sin2 /;"	k	type:TDEnvelopeFunctionEnum
singlePartOut	linrespcommon.F90	/^  character(*), parameter :: singlePartOut /;"	v	module:dftbp_timedep_linrespcommon
singlet	timeprop.F90	/^    integer :: singlet /;"	k	type:TDSpinTypesEnum
skCutoff	timeprop.F90	/^    real(dp) :: mCutoff, skCutoff,/;"	k	type:TElecDynamics
solveZVectorPrecond	linrespgrad.F90	/^  subroutine solveZVectorPrecond(/;"	s	module:dftbp_timedep_linrespgrad
spType	timeprop.F90	/^    integer :: spType$/;"	k	type:TElecDynamicsInp
spType	timeprop.F90	/^    integer :: writeFreq, pertType, envType, spType$/;"	k	type:TElecDynamics
species	timeprop.F90	/^    integer, allocatable :: species(/;"	k	type:TElecDynamics
speciesAll	timeprop.F90	/^    integer, allocatable :: species(:), polDirs(:), speciesAll(/;"	k	type:TElecDynamics
speciesName	timeprop.F90	/^    character(mc), allocatable :: speciesName(/;"	k	type:TElecDynamics
spinW	linresp.F90	/^    real(dp), allocatable :: spinW(/;"	k	type:TLinrespini
spinW	linresptypes.F90	/^    real(dp), allocatable :: spinW(/;"	k	type:TLinResp
startTime	timeprop.F90	/^    real(dp) :: time, startTime,/;"	k	type:TElecDynamics
steps	timeprop.F90	/^    integer :: steps$/;"	k	type:TElecDynamicsInp
stratmann	linresptypes.F90	/^    integer :: stratmann /;"	k	type:TSolverTypesEnum
subSpaceFactorStratmann	linresp.F90	/^    integer :: subSpaceFactorStratmann$/;"	k	type:TLinrespini
subSpaceFactorStratmann	linresptypes.F90	/^    integer :: subSpaceFactorStratmann$/;"	k	type:TLinResp
sym	linresp.F90	/^    character :: sym$/;"	k	type:TLinrespini
sym	pprpa.F90	/^    character :: sym$/;"	k	type:TppRPAcal
symmetry	linresptypes.F90	/^    character :: symmetry$/;"	k	type:TLinResp
tArnoldi	linresp.F90	/^    logical :: tArnoldi$/;"	k	type:TLinrespini
tArnoldi	linresptypes.F90	/^    logical :: tArnoldi$/;"	k	type:TLinResp
tBondE	timeprop.F90	/^    logical :: FirstIonStep = .true., tEulers = .false., tBondE /;"	k	type:TElecDynamics
tBondE	timeprop.F90	/^    logical :: tBondE$/;"	k	type:TElecDynamicsInp
tBondP	timeprop.F90	/^    logical :: FirstIonStep = .true., tEulers = .false., tBondE = .false., tBondP /;"	k	type:TElecDynamics
tBondP	timeprop.F90	/^    logical :: tBondP$/;"	k	type:TElecDynamicsInp
tCacheCharges	linresp.F90	/^    logical :: tCacheCharges$/;"	k	type:TLinrespini
tCacheChargesOccVir	linresptypes.F90	/^    logical :: tCacheChargesOccVir$/;"	k	type:TLinResp
tCacheChargesOccVir	transcharges.F90	/^    logical :: tCacheChargesOccVir$/;"	k	type:TTransCharges
tCacheChargesSame	linresptypes.F90	/^    logical :: tCacheChargesSame$/;"	k	type:TLinResp
tCacheChargesSame	transcharges.F90	/^    logical :: tCacheChargesSame$/;"	k	type:TTransCharges
tCoeffs	linresp.F90	/^    logical :: tCoeffs$/;"	k	type:TLinrespini
tConstVir	pprpa.F90	/^    logical :: tConstVir$/;"	k	type:TppRPAcal
tDiagnoseArnoldi	linresp.F90	/^    logical :: tDiagnoseArnoldi$/;"	k	type:TLinrespini
tEnergyWindow	linresp.F90	/^    logical :: tEnergyWindow$/;"	k	type:TLinrespini
tEnergyWindow	linresptypes.F90	/^    logical :: tEnergyWindow$/;"	k	type:TLinResp
tEnvFromFile	timeprop.F90	/^    logical :: tLaser = .false., tKick = .false., tKickAndLaser = .false., tEnvFromFile /;"	k	type:TElecDynamics
tEulers	timeprop.F90	/^    logical :: FirstIonStep = .true., tEulers /;"	k	type:TElecDynamics
tEulers	timeprop.F90	/^    logical :: tEulers$/;"	k	type:TElecDynamicsInp
tFillingsFromFile	timeprop.F90	/^    logical :: tFillingsFromFile$/;"	k	type:TElecDynamicsInp
tFillingsFromFile	timeprop.F90	/^    logical :: tPeriodic = .false., tFillingsFromFile /;"	k	type:TElecDynamics
tForces	timeprop.F90	/^    logical :: tForces$/;"	k	type:TElecDynamicsInp
tForces	timeprop.F90	/^    logical :: tForces,/;"	k	type:TElecDynamics
tGrndState	linresp.F90	/^    logical :: tGrndState$/;"	k	type:TLinrespini
tGrndState	linresptypes.F90	/^    logical :: tGrndState /;"	k	type:TLinResp
tInit	linresptypes.F90	/^    logical :: tInit /;"	k	type:TLinResp
tIons	timeprop.F90	/^    logical :: tIons$/;"	k	type:TElecDynamicsInp
tIons	timeprop.F90	/^    logical, public :: tIons$/;"	k	type:TElecDynamics
tKick	timeprop.F90	/^    logical :: tLaser = .false., tKick /;"	k	type:TElecDynamics
tKickAndLaser	timeprop.F90	/^    logical :: tLaser = .false., tKick = .false., tKickAndLaser /;"	k	type:TElecDynamics
tLaser	timeprop.F90	/^    logical :: tLaser /;"	k	type:TElecDynamics
tMulliken	linresp.F90	/^    logical :: tMulliken$/;"	k	type:TLinrespini
tNaCoupling	linresp.F90	/^    logical :: tNaCoupling$/;"	k	type:TLinrespini
tNaCoupling	linresptypes.F90	/^    logical :: tNaCoupling /;"	k	type:TLinResp
tNetCharges	timeprop.F90	/^    logical :: tNetCharges /;"	k	type:TElecDynamics
tOscillatorWindow	linresp.F90	/^    logical :: tOscillatorWindow$/;"	k	type:TLinrespini
tOscillatorWindow	linresptypes.F90	/^    logical :: tOscillatorWindow$/;"	k	type:TLinResp
tPeriodic	timeprop.F90	/^    logical :: tPeriodic /;"	k	type:TElecDynamics
tPopulations	timeprop.F90	/^    logical :: tPopulations$/;"	k	type:TElecDynamicsInp
tPopulations	timeprop.F90	/^    logical :: tPopulations,/;"	k	type:TElecDynamics
tPrintEigVecs	linresp.F90	/^    logical :: tPrintEigVecs$/;"	k	type:TLinrespini
tProbe	timeprop.F90	/^    logical :: tForces, ReadMDVelocities, tPump, tProbe,/;"	k	type:TElecDynamics
tProbe	timeprop.F90	/^    logical :: tProbe$/;"	k	type:TElecDynamicsInp
tPropagatorsInitialized	timeprop.F90	/^    logical, public :: tPropagatorsInitialized /;"	k	type:TElecDynamics
tPump	timeprop.F90	/^    logical :: tForces, ReadMDVelocities, tPump,/;"	k	type:TElecDynamics
tPump	timeprop.F90	/^    logical :: tPump$/;"	k	type:TElecDynamicsInp
tReadMDVelocities	timeprop.F90	/^    logical :: tReadMDVelocities$/;"	k	type:TElecDynamicsInp
tReadRestart	timeprop.F90	/^    logical :: tReadRestart$/;"	k	type:TElecDynamicsInp
tReadRestart	timeprop.F90	/^    logical :: tReadRestart,/;"	k	type:TElecDynamics
tReadRestartAscii	timeprop.F90	/^    logical :: tReadRestartAscii /;"	k	type:TElecDynamicsInp
tRealHS	timeprop.F90	/^    logical :: tForces, ReadMDVelocities, tPump, tProbe, tRealHS$/;"	k	type:TElecDynamics
tRestartAscii	timeprop.F90	/^    logical :: tReadRestart, tWriteRestart, tRestartAscii,/;"	k	type:TElecDynamics
tSPTrans	linresp.F90	/^    logical :: tSPTrans$/;"	k	type:TLinrespini
tSpin	linresptypes.F90	/^    logical :: tSpin$/;"	k	type:TLinResp
tSpinPol	timeprop.F90	/^    logical :: tPopulations, tSpinPol=/;"	k	type:TElecDynamics
tTDA	pprpa.F90	/^    logical :: tTDA$/;"	k	type:TppRPAcal
tTradip	linresp.F90	/^    logical :: tTradip$/;"	k	type:TLinrespini
tTrans	linresp.F90	/^    logical :: tTrans$/;"	k	type:TLinrespini
tTransQ	linresp.F90	/^    logical :: tTransQ$/;"	k	type:TLinrespini
tWriteAtomEnergies	timeprop.F90	/^    logical :: tNetCharges = .false., tWriteAtomEnergies /;"	k	type:TElecDynamics
tWriteAtomEnergies	timeprop.F90	/^    logical :: tWriteAtomEnergies$/;"	k	type:TElecDynamicsInp
tWriteAutotest	timeprop.F90	/^    logical :: tReadRestart, tWriteRestart, tRestartAscii, tWriteRestartAscii, tWriteAutotest$/;"	k	type:TElecDynamics
tWriteDensityMatrix	linresp.F90	/^    logical :: tWriteDensityMatrix$/;"	k	type:TLinrespini
tWriteDensityMatrix	linresptypes.F90	/^    logical :: tWriteDensityMatrix$/;"	k	type:TLinResp
tWriteRestart	timeprop.F90	/^    logical :: tReadRestart, tWriteRestart,/;"	k	type:TElecDynamics
tWriteRestart	timeprop.F90	/^    logical :: tWriteRestart$/;"	k	type:TElecDynamicsInp
tWriteRestartAscii	timeprop.F90	/^    logical :: tReadRestart, tWriteRestart, tRestartAscii, tWriteRestartAscii,/;"	k	type:TElecDynamics
tWriteRestartAscii	timeprop.F90	/^    logical :: tWriteRestartAscii /;"	k	type:TElecDynamicsInp
tXplusY	linresp.F90	/^    logical :: tXplusY$/;"	k	type:TLinrespini
tblite	timeprop.F90	/^    type(TTBLite), allocatable :: tblite$/;"	k	type:TElecDynamics
tdCoordsAndVelosAreSet	timeprop.F90	/^    logical, public :: tdCoordsAndVelosAreSet /;"	k	type:TElecDynamics
tdCoordsAndVelosThroughAPI	timeprop.F90	/^    logical, public :: tdCoordsAndVelosThroughAPI /;"	k	type:TElecDynamics
tdFieldIsSet	timeprop.F90	/^    logical, public :: tdFieldIsSet /;"	k	type:TElecDynamics
tdFieldThroughAPI	timeprop.F90	/^    logical, public :: tdFieldThroughAPI /;"	k	type:TElecDynamics
tdFunction	timeprop.F90	/^    real(dp), allocatable :: tdFunction(/;"	k	type:TElecDynamics
tdLaserField	timeprop.F90	/^    real(dp) :: tdLaserField /;"	k	type:TElecDynamicsInp
tdPPFrames	timeprop.F90	/^    integer :: tdPPFrames$/;"	k	type:TElecDynamicsInp
tdPopulInit	timeprop.F90	/^  subroutine tdPopulInit(/;"	s	module:dftbp_timedep_timeprop
tdPpRange	timeprop.F90	/^    real(dp) :: tdPpRange(/;"	k	type:TElecDynamicsInp
tdSpinTypes	timeprop.F90	/^  type(TDSpinTypesEnum), parameter :: tdSpinTypes /;"	v	module:dftbp_timedep_timeprop
tdWriteExtras	timeprop.F90	/^    logical :: tdWriteExtras$/;"	k	type:TElecDynamics
tdWriteExtras	timeprop.F90	/^    logical :: tdWriteExtras$/;"	k	type:TElecDynamicsInp
tdfield	timeprop.F90	/^    real(dp) :: tdfield$/;"	k	type:TElecDynamicsInp
tempAtom	timeprop.F90	/^    real(dp) :: tempAtom$/;"	k	type:TElecDynamicsInp
testArnoldi	linresptypes.F90	/^    logical :: testArnoldi /;"	k	type:TLinResp
testArpackOut	linrespgrad.F90	/^  character(*), parameter :: testArpackOut /;"	v	module:dftbp_timedep_linrespgrad
time	timeprop.F90	/^    real(dp) :: time,/;"	k	type:TElecDynamics
time0	timeprop.F90	/^    real(dp) :: time0$/;"	k	type:TElecDynamics
time0	timeprop.F90	/^    real(dp) :: time0$/;"	k	type:TElecDynamicsInp
time1	timeprop.F90	/^    real(dp) :: time1$/;"	k	type:TElecDynamics
time1	timeprop.F90	/^    real(dp) :: time1$/;"	k	type:TElecDynamicsInp
timeElec	timeprop.F90	/^    real(dp) :: time, startTime, timeElec,/;"	k	type:TElecDynamics
totalForce	timeprop.F90	/^    real(dp), allocatable, public :: dipole(:,:), totalForce(/;"	k	type:TElecDynamics
transDens	linrespcommon.F90	/^  subroutine transDens(/;"	s	module:dftbp_timedep_linrespcommon
transDipOut	linrespgrad.F90	/^  character(*), parameter :: transDipOut /;"	v	module:dftbp_timedep_linrespgrad
transitionDipole	linrespcommon.F90	/^  subroutine transitionDipole(/;"	s	module:dftbp_timedep_linrespcommon
transitionsOut	linrespgrad.F90	/^  character(*), parameter :: transitionsOut /;"	v	module:dftbp_timedep_linrespgrad
transq	transcharges.F90	/^  pure function transq(/;"	f	module:dftbp_timedep_transcharges
trho	timeprop.F90	/^    complex(dp), allocatable :: trho(/;"	k	type:TElecDynamics
trhoOld	timeprop.F90	/^    complex(dp), allocatable :: trhoOld(/;"	k	type:TElecDynamics
triplet	timeprop.F90	/^    integer :: triplet /;"	k	type:TDSpinTypesEnum
twothird	linrespcommon.F90	/^  real(dp), parameter :: twothird /;"	v	module:dftbp_timedep_linrespcommon
updateBasisMatrices	timeprop.F90	/^  subroutine updateBasisMatrices(/;"	s	module:dftbp_timedep_timeprop
updateDQ	timeprop.F90	/^  subroutine updateDQ(/;"	s	module:dftbp_timedep_timeprop
updateH	timeprop.F90	/^  subroutine updateH(/;"	s	module:dftbp_timedep_timeprop
updateH0S	timeprop.F90	/^  subroutine updateH0S(/;"	s	module:dftbp_timedep_timeprop
writeCoeffs	linrespgrad.F90	/^  subroutine writeCoeffs(/;"	s	module:dftbp_timedep_linrespgrad
writeCoeffs	linresptypes.F90	/^    logical :: writeCoeffs /;"	k	type:TLinResp
writeDM	linrespgrad.F90	/^  subroutine writeDM(/;"	s	module:dftbp_timedep_linrespgrad
writeExc	linresptypes.F90	/^    logical :: writeExc /;"	k	type:TLinResp
writeExcMulliken	linrespcommon.F90	/^  subroutine writeExcMulliken(/;"	s	module:dftbp_timedep_linrespcommon
writeExcitations	linrespgrad.F90	/^  subroutine writeExcitations(/;"	s	module:dftbp_timedep_linrespgrad
writeFreq	timeprop.F90	/^    integer :: writeFreq$/;"	k	type:TElecDynamicsInp
writeFreq	timeprop.F90	/^    integer :: writeFreq,/;"	k	type:TElecDynamics
writeMulliken	linresptypes.F90	/^    logical :: writeMulliken /;"	k	type:TLinResp
writeNACV	linrespgrad.F90	/^  subroutine writeNACV(/;"	s	module:dftbp_timedep_linrespgrad
writeRestartFile	dynamicsrestart.F90	/^  subroutine writeRestartFile(/;"	s	module:dftbp_timedep_dynamicsrestart
writeSPExcitations	linrespcommon.F90	/^  subroutine writeSPExcitations(/;"	s	module:dftbp_timedep_linrespcommon
writeSPTrans	linresptypes.F90	/^    logical :: writeSPTrans /;"	k	type:TLinResp
writeTDAutotest	timeprop.F90	/^  subroutine writeTDAutotest(/;"	s	module:dftbp_timedep_timeprop
writeTDOutputs	timeprop.F90	/^  subroutine writeTDOutputs(/;"	s	module:dftbp_timedep_timeprop
writeTrans	linresptypes.F90	/^    logical :: writeTrans /;"	k	type:TLinResp
writeTransDip	linresptypes.F90	/^    logical :: writeTransDip /;"	k	type:TLinResp
writeTransQ	linresptypes.F90	/^    logical :: writeTransQ /;"	k	type:TLinResp
writeXplusY	linresptypes.F90	/^    logical :: writeXplusY /;"	k	type:TLinResp
writeppRPAExcitations	pprpa.F90	/^  subroutine writeppRPAExcitations(/;"	s	module:dftbp_timedep_pprpa
